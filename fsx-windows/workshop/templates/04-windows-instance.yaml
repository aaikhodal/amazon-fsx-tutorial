---
AWSTemplateFormatVersion: 2010-09-09
Description: Launches one Amazon EC2 Windows instance
Metadata:
  License:
    Description: 'Copyright 2019 Amazon.com, Inc. and its affiliates. All Rights Reserved.
      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at
      http://aws.amazon.com/asl/
      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Microsoft AD
      Parameters:
        - DirectoryId
    - Label:
        default: Amazon EC2 Windows Instances
      Parameters:
        - WindowsVersion
        - InstanceType
        - Subnets
        - SecurityGroup
        - KeyName
    ParameterLabels:
      DirectoryId:
        default: Directory Id
      KeyName:
        default: EC2 key pair
      InstanceType:
        default: EC2 instance type
      SecurityGroups:
        default: Security groups
      Subnets:
        default: Subnet
      WindowsVersion:
        default: Windows version
Parameters:
  DirectoryId:
    AllowedPattern: ^(d-)([a-z0-9]{10})$
    Description: AWS Managed Microsoft AD Id (e.g., d-0123456789)
    Type: String
  KeyName:
    Description: An existing Amazon EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    AllowedValues: 
    - t3.large
    - t3.xlarge
    - c5.large
    - c5.xlarge
    - m5.large
    - m5.xlarge
    Default: c5.large
    Description: Amazon EC2 instance type
    Type: String
  SecurityGroup:
    Description: Select the security group.
    Type: AWS::EC2::SecurityGroup::Id
  Subnets:
    Description: Select one subnet.
    Type: AWS::EC2::Subnet::Id
  WindowsVersion:
    AllowedValues:
    - Windows Server 2019 English 64-bit
    - Windows Server 2016 English 64-bit
    - Windows Server 2012 R2 English 64-bit
    - Windows Server 2012 RTM English 64-bit
    Description: Select the Windows version.
    Type: String
    Default: Windows Server 2019 English 64-bit
Resources:
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt AmiInfo.Id
      Monitoring: true
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref SecurityGroup
      SubnetId: !Ref Subnets
      Tags:
        - Key: Name
          Value: "Windows Server"
  FSxDomainJoinInstallDFS:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: Join instances to an AWS Directory Service domain
        parameters:
          directoryId:
            type: String
            description: (Required) ID of the AWS Managed Microsoft AD (i.e. d-0123456789)
          directoryName:
            type: String
            description: (Required) Directory name (i.e. example.com)
          dnsIpAddresses:
            type: StringList
            default: []
            description: "(Optional) AWS Managed Microsoft AD DNS IP addresses (i.e. 172.31.0.11, 172.31.0.12)
              Required when DHCP is not configured. Learn more at http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html"
        mainSteps:
        - action: aws:domainJoin
          name: joinDomain
          inputs:
            directoryId: "{{ directoryId }}"
            directoryName: "{{ directoryName }}"
            dnsIpAddresses: "{{ dnsIpAddresses }}"
        - action: aws:runPowerShellScript
          name: installDfsMgmt
          inputs:
            runCommand:
              - Install-WindowsFeature -Name FS-FileServer, FS-DFS-namespace -IncludeManagementTools;
              - Install-WindowsFeature -Name RSAT-DFS-Mgmt-Con
              - New-Item -Type Directory -Path "C:\DFS"
  Association:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref FSxDomainJoinInstallDFS
      Parameters:
        directoryId: [!Ref DirectoryId]
        directoryName: [!GetAtt ActiveDirectory.Name]
        dnsIpAddresses:
        - !Select [ 0, !GetAtt ActiveDirectory.DnsIpAddrs ]
        - !Select [ 1, !GetAtt ActiveDirectory.DnsIpAddrs ]        
      Targets:
      - Key: InstanceIds
        Values: [ !Ref Instance1 ]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSDirectoryServiceReadOnlyAccess'
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
  ActiveDirectoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub solution-references-${AWS::Region}
        S3Key: fsx/dfs/ActiveDirectoryCustomResource.zip
      Handler: ad.handler
      Runtime: nodejs8.10
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  ActiveDirectory:
    Type: Custom::ActiveDirectory
    Properties:
      ServiceToken: !GetAtt ActiveDirectoryFunction.Arn
      Region: !Ref 'AWS::Region'
      ID: !Ref DirectoryId
  AmiInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub solution-references-${AWS::Region}
        S3Key: fsx/dfs/amilookup-win.zip
      Handler: amilookup-win.handler
      Runtime: nodejs8.10
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  AmiInfo:
    Type: Custom::AmiInfo
    Properties:
      ServiceToken: !GetAtt AmiInfoFunction.Arn
      Region: !Ref 'AWS::Region'
      OSName: !Ref WindowsVersion
Outputs:
  Instance1:
    Description: Amazon EC2 Windows DFS Namespace Server 1
    Value: !Ref Instance1
  Instance1DnsName:
    Description: Amazon EC2 Windows DFS Namespace Server 1 DNS name
    Value: !GetAtt Instance1.PublicDnsName
  WindowsVersion:
    Description: Amazon EC2 instance Windows Version
    Value: !Ref WindowsVersion
  InstanceAmi:
    Description: Amazon EC2 instance AMI Id
    Value: !GetAtt AmiInfo.Id

